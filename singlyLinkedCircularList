#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#define NUM 0;

using namespace std;

//约瑟夫环问题，关键是建立循环链表（即创建约瑟夫环）
/*设有编号为1，2，……，n的n(n>0)个人围成一个圈，从第1个人开始报数，报到m时停止报数，
报m的人出圈，再从他的下一个人起重新报数，报到m时停止报数，报m的出圈，……，
如此下去，直到所有人全部出圈为止。当任意给定n和m后，设计算法求n个人出圈的次序。*/

typedef struct Node
{
	int data;
	struct Node *next;
}node;
void Josephus(int n, int k, int m)
//n为约瑟夫环中的中人数，k为第一个开始报数的人，m为出列者喊到的数
{
	node* p;
	node* report;
	//node* head;
	node* curr;
	//creat the circulate list
	//追加节点法
	//先建立一个只有一个节点的循环链表p，然后用循环逐渐往里追加节点。
	p = (node*)malloc(sizeof(node));
	p->data = 1;
	p->next = p;
	curr = p;
	for (int i = 2;i <= n;i++)
	{
		node* t = (node*)malloc(sizeof(node));
		t->data = i;
		t->next = curr->next;
		curr->next = t;
		curr = t;

	}
	//找到第一个报数的人，把curr节点移到这个人
	report = curr->next; //此时的curr->next相当于链表的第一个节点，即标号为1的节点（伪头结点）
						 //找到第k个节点
	for (int j = 1; j < k;j++)
	{
		report = p;
		p = p->next;
	}
	//依次找到出列者并删除
	while (n--)
	{
		for (int s = m - 1; s >0; s--)
		{
			report = p;
			p = p->next;
		}
		report->next = p->next;
		printf("%d->", p->data);
		free(p);
		p = report->next;
	}

}
int main()
{
	Josephus(15, 6, 2);
	system("pause");
	return 0;
}
